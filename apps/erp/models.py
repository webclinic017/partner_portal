
from django.db import models, connections
from django.db.models import Count, Q




class Areas(models.Model):
    active = models.IntegerField()
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    hash = models.CharField(max_length=36)

    class Meta:
        managed = False
        db_table = 'areas'


class AssignmentIncidents(models.Model):
    assignment = models.OneToOneField('Assignments', models.DO_NOTHING)
    assignment_incident_origin = models.IntegerField()
    incident_status = models.ForeignKey('IncidentStatus', models.DO_NOTHING)
    client = models.ForeignKey('People', related_name='assignment_incident_client', on_delete=models.DO_NOTHING)
    person = models.ForeignKey('People', related_name='assignment_incident_person', on_delete=models.DO_NOTHING)
    protocol = models.AutoField(primary_key=True)
    type = models.IntegerField()
    incident_type = models.ForeignKey('IncidentTypes', models.DO_NOTHING)
    internal_hours = models.IntegerField(blank=True, null=True)
    client_hours = models.IntegerField(blank=True, null=True)
    solicitation_classification = models.ForeignKey('SolicitationClassifications', models.DO_NOTHING, blank=True, null=True)
    solicitation_problem = models.ForeignKey('SolicitationProblems', models.DO_NOTHING, blank=True, null=True)
    treatment = models.IntegerField()
    beginning_service_date = models.DateTimeField(blank=True, null=True)
    seconds_to_start = models.IntegerField()
    date_to_start = models.DateTimeField()
    responsible_final_date = models.DateTimeField(blank=True, null=True)
    beginning_checklist = models.TextField(blank=True, null=True)
    final_checklist = models.TextField(blank=True, null=True)
    final_checklist_complete = models.IntegerField()
    feedback_status = models.IntegerField(blank=True, null=True)
    feedback_score = models.IntegerField(blank=True, null=True)
    feedback_description = models.TextField(blank=True, null=True)
    feedback_date = models.DateField(blank=True, null=True)
    feedback_last_email_sent = models.DateField(blank=True, null=True)
    feedback_number_emails_sent = models.IntegerField()
    complement_solicitation = models.TextField(blank=True, null=True)
    last_permanency_check = models.DateTimeField(blank=True, null=True)
    sale_order_id = models.IntegerField(blank=True, null=True)
    active_sale_status = models.IntegerField(blank=True, null=True)
    motive_sale = models.IntegerField(blank=True, null=True)
    justification = models.TextField(blank=True, null=True)
    additional_info = models.TextField(blank=True, null=True)
    responsible_sale_id = models.IntegerField(blank=True, null=True)
    date_sale = models.DateField(blank=True, null=True)
    stock_pending = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    
    class Meta:
        managed = False
        db_table = 'assignment_incidents'


class AssignmentPersonRoutings(models.Model):
    assignment = models.ForeignKey('Assignments', models.DO_NOTHING)
    origin_person = models.ForeignKey('People', related_name='apr_origin_person', on_delete=models.DO_NOTHING)
    destination_person = models.ForeignKey('People', related_name='apr_destination_person', on_delete=models.DO_NOTHING)
    origin_requestor = models.ForeignKey('People', related_name='apr_origin_requestor', on_delete=models.DO_NOTHING)
    destination_requestor = models.ForeignKey('People', related_name='apr_destination_requestor', on_delete=models.DO_NOTHING)
    origin_beginning_date = models.DateTimeField(blank=True, null=True)
    destination_beginning_date = models.DateTimeField(blank=True, null=True)
    origin_final_date = models.DateTimeField(blank=True, null=True)
    destination_final_date = models.DateTimeField(blank=True, null=True)
    origin_incident_type = models.ForeignKey('IncidentTypes', related_name='apr_origin_incident_type', on_delete=models.DO_NOTHING)
    destination_incident_type = models.ForeignKey('IncidentTypes', related_name='apr_destination_incident_type', on_delete=models.DO_NOTHING)
    origin_team = models.ForeignKey('Teams', related_name='apr_origin_team', on_delete=models.DO_NOTHING)
    destination_team = models.ForeignKey('Teams', related_name='apr_destination_team', on_delete=models.DO_NOTHING)    
    type = models.IntegerField(blank=True, null=True)
    report_id = models.PositiveIntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'assignment_person_routings'


class Assignments(models.Model):
    lft = models.PositiveIntegerField(blank=True, null=True)
    rght = models.PositiveIntegerField(blank=True, null=True)
    root_id = models.PositiveIntegerField(blank=True, null=True)
    parent_id = models.PositiveIntegerField(blank=True, null=True)
    level = models.PositiveIntegerField(blank=True, null=True)
    dependent_assignment = models.IntegerField(blank=True, null=True)
    dependence_type = models.IntegerField(blank=True, null=True)
    corresponding_parent_id = models.IntegerField(blank=True, null=True)
    instance_id = models.PositiveIntegerField(blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField()
    assignment_type = models.CharField(max_length=4)
    requestor = models.ForeignKey('People', related_name='assignments_requestor', on_delete=models.DO_NOTHING)
    responsible = models.ForeignKey('People', related_name='assignments_responsible', on_delete=models.DO_NOTHING)
    team = models.ForeignKey('Teams', models.DO_NOTHING, blank=True, null=True)
    priority = models.IntegerField()
    beginning_date = models.DateTimeField(blank=True, null=True)
    final_date = models.DateTimeField(blank=True, null=True)
    report_closing_date = models.DateTimeField(blank=True, null=True)
    conclusion_date = models.DateTimeField(blank=True, null=True)
    lifetime_seconds = models.IntegerField()
    lifetime_business_seconds = models.IntegerField()
    seconds_planned = models.IntegerField()
    children_seconds_planned = models.IntegerField()
    seconds_worked = models.IntegerField()
    children_seconds_worked = models.IntegerField(blank=True, null=True)
    reopened_seconds_worked = models.IntegerField()
    childen_reopened_seconds_worked = models.IntegerField()
    planned_amount = models.FloatField(blank=True, null=True)
    children_planned_amount = models.FloatField(blank=True, null=True)
    spent_amount = models.FloatField(blank=True, null=True)
    children_spent_amount = models.FloatField(blank=True, null=True)
    planned_resource_amount = models.FloatField()
    resource_spent_amount = models.FloatField()
    weight = models.IntegerField(blank=True, null=True)
    type_progress = models.IntegerField()
    progress = models.IntegerField()
    status = models.IntegerField(blank=True, null=True)
    reopen = models.IntegerField()
    in_execution = models.IntegerField(blank=True, null=True)
    rework = models.IntegerField()
    read = models.IntegerField()
    qualifies = models.IntegerField()
    modify_time = models.IntegerField()
    send_email = models.IntegerField()
    send_notification = models.IntegerField()
    private = models.IntegerField(blank=True, null=True)
    was_planned = models.IntegerField()
    where = models.CharField(max_length=255, blank=True, null=True)
    how = models.CharField(max_length=255, blank=True, null=True)
    task = models.PositiveIntegerField()
    internal_observation = models.TextField(blank=True, null=True)
    person_tags = models.CharField(max_length=255, blank=True, null=True)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    goal = models.IntegerField()
    id_provisorio = models.IntegerField(blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_type = models.IntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    estimated_points = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'assignments'


class AuthenticationAddressLists(models.Model):
    code = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    observation = models.TextField(blank=True, null=True)
    pool_block_type = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    active = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    hash = models.CharField(max_length=36)
    erp_code = models.PositiveIntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'authentication_address_lists'


class AuthenticationContracts(models.Model):
    contract = models.ForeignKey('Contracts', models.DO_NOTHING)
    service_product = models.ForeignKey('ServiceProducts', models.DO_NOTHING)
    service_type = models.IntegerField(blank=True, null=True)
    user = models.CharField(max_length=255, blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    mac = models.CharField(max_length=255, blank=True, null=True)
    mac_password = models.CharField(max_length=255, blank=True, null=True)
    wireless_mac = models.CharField(max_length=255, blank=True, null=True)
    wifi_name = models.CharField(max_length=255, blank=True, null=True)
    wifi_password = models.CharField(max_length=255, blank=True, null=True)
    fiber_mac = models.CharField(max_length=255, blank=True, null=True)
    valid_lan_ip = models.CharField(max_length=255, blank=True, null=True)
    valid_lan_ip_class = models.CharField(max_length=255, blank=True, null=True)
    port_olt = models.IntegerField(blank=True, null=True)
    slot_olt = models.IntegerField(blank=True, null=True)
    authentication_ip_0 = models.CharField(db_column='authentication_ip', max_length=255, blank=True, null=True)  
    authentication_address_list = models.ForeignKey(AuthenticationAddressLists, models.DO_NOTHING, blank=True, null=True)
    equipment_type = models.IntegerField(blank=True, null=True)
    equipment_user = models.CharField(max_length=255, blank=True, null=True)
    equipment_password = models.CharField(max_length=255, blank=True, null=True)
    equipment_port = models.CharField(max_length=255, blank=True, null=True)
    adsl_port = models.IntegerField(blank=True, null=True)
    equipment_serial_number = models.CharField(max_length=255, blank=True, null=True)
    simultane_connection = models.IntegerField()
    people_address = models.ForeignKey('PeopleAddresses', models.DO_NOTHING, blank=True, null=True)
    postal_code = models.CharField(max_length=255, blank=True, null=True)
    street_number = models.CharField(max_length=255, blank=True, null=True)
    neighborhood = models.CharField(max_length=255, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=255, blank=True, null=True)
    lat = models.CharField(max_length=255, blank=True, null=True)
    lng = models.CharField(max_length=255, blank=True, null=True)
    lat_lng_accuracy = models.DecimalField(max_digits=10, decimal_places=6)
    lat_lng_mocked = models.IntegerField()
    service_tag_id = models.PositiveIntegerField(blank=True, null=True)
    connection_type = models.IntegerField()
    complement = models.TextField(blank=True, null=True)
    active = models.IntegerField()
    ip_type = models.IntegerField(blank=True, null=True)
    original_ip_type = models.IntegerField(blank=True, null=True)    
    api_port = models.CharField(max_length=255, blank=True, null=True)
    activation_date = models.DateTimeField(blank=True, null=True)
    use_franchise = models.IntegerField()
    franchise_consumption = models.IntegerField()
    automatic_updated = models.IntegerField()
    olt_id = models.IntegerField(blank=True, null=True)
    audition_error = models.IntegerField()
    audition_info = models.TextField(blank=True, null=True)
    provision_status = models.IntegerField()
    provisioning = models.IntegerField(blank=True, null=True)
    last_provision_return = models.TextField(blank=True, null=True)
    community_snmp = models.CharField(max_length=255, blank=True, null=True)
    has_redundancy = models.IntegerField()
    geogrid_integration_status = models.IntegerField(blank=True, null=True)
    additional_info = models.TextField(blank=True, null=True)
    integration_code = models.CharField(max_length=255, blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    authentication_ipv6_type = models.IntegerField()
    reference = models.TextField(blank=True, null=True)
    address_complement = models.TextField(blank=True, null=True)
    vlan = models.CharField(max_length=255, blank=True, null=True)
    vlan_interface = models.CharField(max_length=255, blank=True, null=True)
    ipoe_send_gateway_concentrator = models.IntegerField()
    technology_type = models.IntegerField(blank=True, null=True)
    use_authentication_attribute_layout = models.IntegerField()
    

    class Meta:
        managed = False
        db_table = 'authentication_contracts'



class ContractTypes(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    active = models.IntegerField()
    is_corporate = models.IntegerField()
    # company_place = models.ForeignKey(CompaniesPlaces, models.DO_NOTHING, blank=True, null=True)
    # financial_operation = models.ForeignKey('FinancialOperations', models.DO_NOTHING, blank=True, null=True)
    # second_financial_operation = models.ForeignKey('FinancialOperations', models.DO_NOTHING, blank=True, null=True)
    # financial_collection_type = models.ForeignKey('FinancialCollectionTypes', models.DO_NOTHING, blank=True, null=True)
    # financer_nature = models.ForeignKey('FinancersNatures', models.DO_NOTHING, blank=True, null=True)
    # second_financer_nature = models.ForeignKey('FinancersNatures', models.DO_NOTHING, blank=True, null=True)
    # payment_condition = models.ForeignKey('PaymentConditions', models.DO_NOTHING, blank=True, null=True)
    # invoice_serie = models.ForeignKey('InvoiceSeries', models.DO_NOTHING, blank=True, null=True)
    # product_invoice_serie = models.ForeignKey('InvoiceSeries', models.DO_NOTHING, blank=True, null=True)
    # product_financial_operation = models.ForeignKey('FinancialOperations', models.DO_NOTHING, blank=True, null=True)
    # product_financer_nature = models.ForeignKey('FinancersNatures', models.DO_NOTHING, blank=True, null=True)
    future_financial_operation_id = models.PositiveIntegerField(blank=True, null=True)
    future_product_financial_operation_id = models.PositiveIntegerField(blank=True, null=True)
    future_invoicing = models.IntegerField()
    invoice_type = models.IntegerField()
    advance_billings = models.IntegerField()
    proportionality = models.IntegerField()
    generate_user_portal = models.IntegerField()
    generate_authentication = models.IntegerField()
    automatic_billing = models.IntegerField()
    collection_day = models.IntegerField()
    billing_day = models.IntegerField(blank=True, null=True)
    months_duration = models.IntegerField(blank=True, null=True)
    proportionality_type = models.IntegerField()
    expiration_docket_type = models.IntegerField()
    # adjustment_indice = models.ForeignKey(AdjustmentIndices, models.DO_NOTHING, blank=True, null=True)
    use_addendum = models.IntegerField()
    need_client_acceptance = models.IntegerField()
    payment_card = models.IntegerField()
    validity_readjustment = models.IntegerField(blank=True, null=True)
    additional_config = models.TextField(blank=True, null=True)
    contract_date_managements = models.TextField(blank=True, null=True)
    billing_type = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    generate_authentication_hotspot = models.IntegerField()
    erp_code = models.PositiveIntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    contract_service_tag_template = models.CharField(max_length=255, blank=True, null=True)
    generate_only_title = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contract_types'



class Contracts(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    client = models.ForeignKey('People', models.DO_NOTHING)
    contract_number = models.CharField(max_length=255)
    description = models.TextField()
    is_corporate = models.IntegerField()
    contract_type = models.ForeignKey(ContractTypes, models.DO_NOTHING)
    date = models.DateField()
    beginning_date = models.DateField(blank=True, null=True)
    final_date = models.DateField(blank=True, null=True)
    billing_beginning_date = models.DateField(blank=True, null=True)
    billing_final_date = models.DateField(blank=True, null=True)
    special_billing = models.IntegerField()
    months_duration = models.IntegerField(blank=True, null=True)
    observation = models.TextField(blank=True, null=True)
    status_actual = models.IntegerField(blank=True, null=True)
    physical_contract = models.IntegerField()
    alert_payment = models.IntegerField()
    send_email_nfe = models.IntegerField()
    suspension_days = models.IntegerField(blank=True, null=True)
    billing_type = models.IntegerField(blank=True, null=True)
    expiration_docket = models.IntegerField(blank=True, null=True)
    collection_day = models.IntegerField(blank=True, null=True)
    cut_day = models.IntegerField(blank=True, null=True)
    payment_form = models.ForeignKey('PaymentConditions', models.DO_NOTHING, blank=True, null=True)
    financial_collection_type = models.ForeignKey('FinancialCollectionTypes', models.DO_NOTHING, blank=True, null=True)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    weight = models.IntegerField()
    observation_invoice_1 = models.CharField(max_length=255, blank=True, null=True)
    observation_invoice_2 = models.CharField(max_length=255, blank=True, null=True)
    first_collection_date = models.DateField(blank=True, null=True)
    next_adjustment_date = models.DateField(blank=True, null=True)
    adjustment_index = models.CharField(max_length=255, blank=True, null=True)
    adjustment_email = models.IntegerField()
    number_hours = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    use_tag_hour = models.IntegerField()
    additional_time_value = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    observation_billing = models.TextField(blank=True, null=True)
    uses_default_address = models.IntegerField()
    status = models.IntegerField()
    stage = models.IntegerField()
    cancellation_date = models.DateField(blank=True, null=True)
    cancellation_motive = models.TextField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    approval_submission_date = models.DateField(blank=True, null=True)
    approval_date = models.DateField(blank=True, null=True)
    invoice_type = models.IntegerField()
    assignment_type = models.IntegerField(blank=True, null=True)
    contractors = models.IntegerField()
    related_people = models.IntegerField()
    future_financial_operation_id = models.PositiveIntegerField(blank=True, null=True)
    future_product_financial_operation_id = models.PositiveIntegerField(blank=True, null=True)
    future_invoicing = models.IntegerField()
    folder = models.CharField(max_length=255, blank=True, null=True)
    unlimited_period = models.IntegerField()
    automatic_blocking = models.IntegerField()
    collection_sms = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    erp_code_type = models.IntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    service_city_code = models.CharField(max_length=255, blank=True, null=True)
    
    external_identification = models.CharField(max_length=255, blank=True, null=True)
    allow_client_renegotiation = models.IntegerField()
    billet_message = models.CharField(max_length=255, blank=True, null=True)
    tip_status = models.IntegerField(blank=True, null=True)
    billing_day = models.IntegerField(blank=True, null=True)
    use_tag_service = models.IntegerField()
    febraban_account_code = models.CharField(max_length=255, blank=True, null=True)
    use_addendum = models.IntegerField()
    client_acceptance = models.IntegerField(blank=True, null=True)
    file_name_contract = models.CharField(max_length=255, blank=True, null=True)
    bill_type = models.IntegerField()
    bill_expiration_day = models.IntegerField(blank=True, null=True)
    discount_use_contract = models.IntegerField(blank=True, null=True)
    discount_value = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_days_before = models.IntegerField(blank=True, null=True)
    client_type = models.PositiveIntegerField(blank=True, null=True)
    unblock_attempt_count = models.IntegerField(blank=True, null=True)
    generate_only_title = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    v_stage = models.CharField(max_length=32, blank=True, null=True)
    v_status = models.CharField(max_length=32, blank=True, null=True)
    v_invoice_type = models.CharField(max_length=32, blank=True, null=True)
    motv_code_integration = models.IntegerField(blank=True, null=True)
    has_convenia_integration = models.IntegerField()
    marking = models.TextField(blank=True, null=True)
    dealership_group = models.TextField(blank=True, null=True)
    in_project = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contracts'

    def __str__(self):
        return self.description
    
    @staticmethod
    def get_untitled_contracts():
        subquery = FinancialReceivableTitles.objects.using('synsuite').filter(deleted=0, p_is_receivable=1) \
            .values('contract__id').annotate(count_titles = Count('contract__id'))
        
        qs = Contracts.objects.using('synsuite').filter(status=1, deleted=0).filter(~Q(contract_type__id = 4)).filter(~Q(id__in=[q['contract__id'] for q in subquery]))
        return qs



class ContractItems(models.Model):
    contract = models.ForeignKey('Contracts', models.DO_NOTHING)
    # origin_contract = models.ForeignKey('Contracts', models.DO_NOTHING, blank=True, null=True)
    # origin_contract_item = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    service_product = models.ForeignKey('ServiceProducts', models.DO_NOTHING)
    description = models.CharField(max_length=255)
    is_combination = models.IntegerField(blank=True, null=True)
    is_composition = models.IntegerField()
    # combination_contract_item = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    units = models.IntegerField()
    unit_amount = models.DecimalField(max_digits=12, decimal_places=2)
    total_amount = models.DecimalField(max_digits=12, decimal_places=2)
    service_unit_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    aliquot = models.DecimalField(max_digits=12, decimal_places=2)
    type = models.IntegerField()
    signal = models.IntegerField()
    client = models.ForeignKey('People', models.DO_NOTHING, blank=True, null=True)
    observation = models.TextField(blank=True, null=True)
    collection = models.IntegerField()
    invoiced = models.IntegerField()
    origin = models.IntegerField()
    use_operation = models.IntegerField()
    communication_type = models.IntegerField()
    demonstration = models.IntegerField()
    demonstration_final_date = models.DateTimeField(blank=True, null=True)
    # contract_service_tag = models.ForeignKey('ContractServiceTags', models.DO_NOTHING, blank=True, null=True)
    # contract_configuration_billing = models.ForeignKey(ContractConfigurationBillings, models.DO_NOTHING, blank=True, null=True)
    adhesion_date = models.DateTimeField(blank=True, null=True)
    adhesion_ip = models.CharField(max_length=255, blank=True, null=True)
    adhesion_term_path = models.CharField(max_length=255, blank=True, null=True)
    integration_code = models.CharField(max_length=255, blank=True, null=True)
    id_profile = models.IntegerField(blank=True, null=True)
    id_subscriber = models.IntegerField(blank=True, null=True)
    contract_parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    integrated = models.IntegerField()
    # phone_number = models.ForeignKey('PhoneNumbers', models.DO_NOTHING, blank=True, null=True)
    # server = models.ForeignKey('Servers', models.DO_NOTHING, blank=True, null=True)
    migration_phone_contract_item_id = models.PositiveIntegerField(blank=True, null=True)
    tip_error_date = models.DateTimeField(blank=True, null=True)
    streaming_ticket = models.CharField(max_length=255, blank=True, null=True)
    has_lte = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    p_is_billable = models.IntegerField(blank=True, null=True)
    motv_code_integration = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'contract_items'



class FinancialCollectionTypes(models.Model):
    title = models.CharField(max_length=255)
    code = models.CharField(max_length=64)
    assignor = models.ForeignKey('People', models.DO_NOTHING, blank=True, null=True)
    type_print_layout = models.IntegerField()
    # bank_account = models.ForeignKey(BankAccounts, models.DO_NOTHING)
    description_agreement = models.CharField(max_length=255, blank=True, null=True)
    contract = models.CharField(max_length=255, blank=True, null=True)
    issuance_ticket = models.IntegerField(blank=True, null=True)
    print_billets = models.IntegerField(blank=True, null=True)
    code_agreement_type = models.IntegerField(blank=True, null=True)
    code_agreement = models.CharField(max_length=255, blank=True, null=True)
    product_code = models.IntegerField(blank=True, null=True)
    loan_portfolio = models.CharField(max_length=3, blank=True, null=True)
    portfolio_variation = models.CharField(max_length=3, blank=True, null=True)
    loan_portfolio_code = models.IntegerField(blank=True, null=True)
    protest = models.IntegerField()
    protest_days = models.IntegerField(blank=True, null=True)
    devolution = models.IntegerField()
    devolution_days = models.CharField(max_length=3, blank=True, null=True)
    type_interest = models.IntegerField(blank=True, null=True)
    interest_code = models.CharField(max_length=255, blank=True, null=True)
    interest = models.DecimalField(max_digits=12, decimal_places=2)
    fine_code = models.CharField(max_length=255, blank=True, null=True)
    fine_days = models.IntegerField(blank=True, null=True)
    fine = models.DecimalField(max_digits=12, decimal_places=2)
    permanence_type = models.CharField(max_length=255, blank=True, null=True)
    billet_tax = models.DecimalField(max_digits=12, decimal_places=2)
    guarantor = models.CharField(max_length=255, blank=True, null=True)
    transferor_code = models.CharField(max_length=255, blank=True, null=True)
    message_1 = models.TextField(blank=True, null=True)
    message_2 = models.TextField(blank=True, null=True)
    message_3 = models.TextField(blank=True, null=True)
    bank_code = models.CharField(max_length=255, blank=True, null=True)
    bank_name = models.CharField(max_length=255, blank=True, null=True)
    cnab = models.IntegerField(blank=True, null=True)
    billing_billet = models.IntegerField(blank=True, null=True)
    registration = models.IntegerField()
    acceptance = models.IntegerField()
    remittance_sequence = models.IntegerField()
    rescheduling_tax = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    layout_version = models.IntegerField(blank=True, null=True)
    layout_version_lot = models.IntegerField()
    file_density = models.IntegerField(blank=True, null=True)
    # financial_title_specie = models.ForeignKey('FinancialTitleSpecies', models.DO_NOTHING, blank=True, null=True)
    # financial_collection_type_layout = models.ForeignKey(FinancialCollectionTypeLayouts, models.DO_NOTHING, blank=True, null=True)
    discount_code = models.IntegerField(blank=True, null=True)
    discount_type = models.IntegerField()
    discount_value = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_days_before = models.IntegerField(blank=True, null=True)
    action_after_expiration = models.IntegerField(blank=True, null=True)
    guarantor_type = models.IntegerField(blank=True, null=True)
    scriptural_billing = models.IntegerField(blank=True, null=True)
    detailed_invoice = models.IntegerField()
    use_transferor_code = models.IntegerField()
    allow_client_renegotiation = models.IntegerField()
    credit_prevision_days = models.IntegerField()
    debit_client_code_size = models.IntegerField(blank=True, null=True)
    config = models.TextField(blank=True, null=True)
    register_credit_clients = models.IntegerField()
    active = models.IntegerField()
    paygw_card_financer_nature_id = models.PositiveIntegerField(blank=True, null=True)
    paygw_tax_financer_nature_id = models.PositiveIntegerField(blank=True, null=True)
    paygw_conciliation_financer_nature_id = models.PositiveIntegerField(blank=True, null=True)
    paygw_movimentation_bank_account_id = models.PositiveIntegerField(blank=True, null=True)
    paygw_payer_id = models.PositiveIntegerField(blank=True, null=True)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    available_in_customer_portal = models.IntegerField(blank=True, null=True)
    type_fine = models.IntegerField(blank=True, null=True)
    additional_message = models.TextField(blank=True, null=True)
    unicred_moviment_parameter = models.CharField(max_length=255, blank=True, null=True)
    use_bank_url = models.IntegerField()
    bank_url = models.CharField(max_length=255, blank=True, null=True)
    competence_print = models.IntegerField()
    debit_account_code_print = models.IntegerField()
    print_one_template = models.IntegerField()
    enable_print = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    hash = models.CharField(max_length=36)
    process_remittance_in = models.IntegerField(blank=True, null=True)
    process_return_remittance_in = models.IntegerField(blank=True, null=True)
    online_integration = models.IntegerField()
    tax_is_percentual = models.IntegerField()
    tax = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    unlock_days_by_trust = models.IntegerField(blank=True, null=True)
    system_type = models.IntegerField(blank=True, null=True)
    code_agreement_appointment_number = models.IntegerField(blank=True, null=True)
    automate_send_billet_to_remittance = models.IntegerField(blank=True, null=True)
    ecommerce_payment = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'financial_collection_types'



class FinancialReceivableTitles(models.Model):
    # company_place = models.ForeignKey(CompaniesPlaces, models.DO_NOTHING)
    # company_place_business_unit = models.ForeignKey(CompanyPlaceBusinessUnits, models.DO_NOTHING, blank=True, null=True)
    client = models.ForeignKey('People', models.DO_NOTHING)
    type = models.IntegerField()
    situation = models.IntegerField()
    title = models.CharField(max_length=255)
    parcel = models.IntegerField()
    bank_title_number = models.CharField(max_length=255, blank=True, null=True)
    bank_title_number_no_format = models.CharField(max_length=255, blank=True, null=True)
    document_amount = models.DecimalField(max_digits=10, decimal_places=2)
    title_amount = models.DecimalField(max_digits=10, decimal_places=2)
    balance = models.DecimalField(max_digits=10, decimal_places=2)
    interest_amount = models.DecimalField(max_digits=10, decimal_places=2)
    fine_amount = models.DecimalField(max_digits=10, decimal_places=2)
    issue_date = models.DateField()
    entry_date = models.DateField()
    expiration_date = models.DateField()
    original_expiration_date = models.DateField()
    # financial_operation = models.ForeignKey(FinancialOperations, models.DO_NOTHING)
    # financer_nature = models.ForeignKey(FinancersNatures, models.DO_NOTHING)
    integrate_accounting = models.IntegerField()
    # bank_account = models.ForeignKey(BankAccounts, models.DO_NOTHING, blank=True, null=True)
    # financial_collection_type = models.ForeignKey(FinancialCollectionTypes, models.DO_NOTHING, blank=True, null=True)
    # financial_collection_type_id_original = models.ForeignKey(FinancialCollectionTypes, models.DO_NOTHING, db_column='financial_collection_type_id_original', blank=True, null=True)
    # payment_condition = models.ForeignKey('PaymentConditions', models.DO_NOTHING, blank=True, null=True)
    # financial_history = models.ForeignKey(FinancialHistories, models.DO_NOTHING, blank=True, null=True)
    # financial_cost_center = models.ForeignKey(FinancialCostCenters, models.DO_NOTHING, blank=True, null=True)
    complement = models.TextField(blank=True, null=True)
    # financial_remittance = models.ForeignKey('FinancialRemittances', models.DO_NOTHING, blank=True, null=True)
    # invoice_note = models.ForeignKey('InvoiceNotes', models.DO_NOTHING, blank=True, null=True)
    contract = models.ForeignKey(Contracts, models.DO_NOTHING, blank=True, null=True)
    competence = models.DateField(blank=True, null=True)
    # assignment = models.ForeignKey(Assignments, models.DO_NOTHING, blank=True, null=True)
    # resource_request = models.ForeignKey('ResourceRequests', models.DO_NOTHING, blank=True, null=True)
    # bill_title = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    origin = models.IntegerField()
    billing_email = models.IntegerField()
    billet_printed = models.IntegerField()
    internal_billet_printed = models.IntegerField()
    first_warning = models.IntegerField()
    first_warning_date = models.DateField(blank=True, null=True)
    second_warning = models.IntegerField()
    second_warning_date = models.DateField(blank=True, null=True)
    contact_made = models.IntegerField()
    contact_made_date = models.DateField(blank=True, null=True)
    registry = models.IntegerField()
    registry_date = models.DateField(blank=True, null=True)
    protest = models.IntegerField()
    protest_date = models.DateField(blank=True, null=True)
    spc = models.IntegerField()
    spc_date = models.DateField(blank=True, null=True)
    extrajudicial_notification = models.IntegerField()
    extrajudicial_notification_date = models.DateField(blank=True, null=True)
    judicial_notification = models.IntegerField()
    judicial_notification_date = models.DateField(blank=True, null=True)
    finished = models.IntegerField()
    finished_date = models.DateField(blank=True, null=True)
    title_loss = models.IntegerField()
    # sale_request = models.ForeignKey('SaleRequests', models.DO_NOTHING, blank=True, null=True)
    credit_account_accountant = models.CharField(max_length=255, blank=True, null=True)
    credit_account_accountant_name = models.CharField(max_length=255, blank=True, null=True)
    debit_account_accountant = models.CharField(max_length=255, blank=True, null=True)
    debit_account_accountant_name = models.CharField(max_length=255, blank=True, null=True)
    address_type = models.IntegerField()
    client_renegotiation_times = models.IntegerField()
    client_on_time_renegotiation_times = models.IntegerField(blank=True, null=True)
    # lawsuit = models.ForeignKey('Lawsuits', models.DO_NOTHING, blank=True, null=True)
    # efetive_invoice_note = models.ForeignKey('InvoiceNotes', models.DO_NOTHING, blank=True, null=True)
    typeful_line = models.CharField(max_length=255, blank=True, null=True)
    barcode = models.CharField(max_length=255, blank=True, null=True)
    warning_sms = models.IntegerField(blank=True, null=True)
    # sms_log = models.ForeignKey('SmsLogs', models.DO_NOTHING, blank=True, null=True)
    reweb_csv_exported = models.IntegerField()
    before_update_info = models.TextField(blank=True, null=True)
    old_bank_title_number = models.CharField(max_length=255, blank=True, null=True)
    old_bank_title_number_no_format = models.CharField(max_length=255, blank=True, null=True)
    renegotiated = models.IntegerField()
    renegotiated_diff = models.DecimalField(max_digits=10, decimal_places=2)
    renegotiated_diff_balance = models.DecimalField(max_digits=10, decimal_places=2)
    # financial_group = models.ForeignKey(FinancialGroups, models.DO_NOTHING, blank=True, null=True)
    bank_situation = models.CharField(max_length=255, blank=True, null=True)
    # doc_financial_cobilling_entry = models.ForeignKey(DocFinancialCobillingEntries, models.DO_NOTHING, blank=True, null=True)
    # sum_financial_cobilling_entry = models.ForeignKey('SumFinancialCobillingEntries', models.DO_NOTHING, blank=True, null=True)
    blocked_contract = models.IntegerField()
    # contract_configuration_billing = models.ForeignKey(ContractConfigurationBillings, models.DO_NOTHING, blank=True, null=True)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    erp_code_bill_title = models.CharField(max_length=64, blank=True, null=True)
    lawsuit_payment_id = models.PositiveIntegerField(blank=True, null=True)
    contract_discount_value = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    contract_days_before = models.IntegerField(blank=True, null=True)
    contract_discount_use_contract = models.IntegerField(blank=True, null=True)
    pdv_id = models.IntegerField(blank=True, null=True)
    # last_integration = models.ForeignKey(FinancialReceivableTitleIntegrations, models.DO_NOTHING, blank=True, null=True)
    integration_status = models.IntegerField(blank=True, null=True)
    recurrence_status = models.IntegerField(blank=True, null=True)
    p_is_receivable = models.IntegerField(blank=True, null=True)
    v_final_amount = models.DecimalField(max_digits=14, decimal_places=2, blank=True, null=True)
    not_block_until_date = models.DateField(blank=True, null=True)
    expected_credit_date = models.DateField(blank=True, null=True)
    expected_credit_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    group_in_billing = models.IntegerField(blank=True, null=True)
    is_origin_csharp = models.IntegerField(blank=True, null=True)
    p_has_before_update_info = models.IntegerField(blank=True, null=True)
    integration_status_date = models.DateTimeField(blank=True, null=True)
    number_of_automatic_remittance_attempts = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'financial_receivable_titles'



class IncidentStatus(models.Model):
    code = models.CharField(max_length=32)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    send_email = models.IntegerField()
    send_push_notification = models.IntegerField()
    active = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    hash = models.CharField(max_length=36)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incident_status'



class IncidentTypeTasks(models.Model):
    incident_type = models.ForeignKey('IncidentTypes', models.DO_NOTHING)
    dependence_task_id = models.IntegerField(blank=True, null=True)
    dependence_type = models.IntegerField(blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    seconds_planned = models.IntegerField(blank=True, null=True)
    team = models.ForeignKey('Teams', models.DO_NOTHING, blank=True, null=True)
    person = models.ForeignKey('People', models.DO_NOTHING, blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)
    qualifies = models.IntegerField()
    send_email = models.IntegerField()
    private = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'incident_type_tasks'



class IncidentTypes(models.Model):
    code = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    
    
    client_view = models.IntegerField()
    active = models.IntegerField()
    forward_in_closing = models.IntegerField()
    
    
    
    schedulable = models.IntegerField()
    
    
    forwarding_type = models.IntegerField()
    tag_requires = models.IntegerField()
    count_time = models.IntegerField()
    object_requires = models.IntegerField()
    requires_catalog_services_item = models.IntegerField()
    service_field = models.IntegerField()
    sale_request_use = models.IntegerField()
    manual_sla = models.IntegerField()
    require_authentication_site = models.IntegerField()
    require_authentication_access_point = models.IntegerField()
    inventoring = models.IntegerField()
    allow_link = models.IntegerField()
    generate_version = models.IntegerField()
    report_to_linked = models.IntegerField()
    allow_scheduling = models.IntegerField()
    activation_type = models.IntegerField()
    authentication_log_requires = models.IntegerField()
    active_sale = models.IntegerField()
    blocked_contract = models.IntegerField()
    type = models.IntegerField()
    task_adjustment = models.IntegerField()
    billing = models.IntegerField()
    solicitation_type = models.IntegerField()
    
    beginning_checklist = models.TextField(blank=True, null=True)
    final_checklist = models.TextField(blank=True, null=True)
    opening_date = models.IntegerField()
    update_type = models.IntegerField()
    routing_reschedule = models.IntegerField()
    requires_catalog_service = models.IntegerField()
    
    
    feedback_requires = models.IntegerField()
    rework = models.IntegerField()
    force_requestor = models.IntegerField()
    default_text = models.TextField(blank=True, null=True)
    print_model_type = models.IntegerField()
    allow_reopening = models.IntegerField()
    viability_type = models.IntegerField()
    use_packing_list = models.IntegerField()
    use_team_permanency = models.IntegerField()
    model_observation = models.TextField(blank=True, null=True)
    weight = models.IntegerField()
    class_requires = models.IntegerField()
    portal_checklist = models.IntegerField()
    portal_require_catalog_service = models.IntegerField()
    extra_configuration = models.TextField(blank=True, null=True)
    linked_people = models.TextField(blank=True, null=True)
    link_projects = models.IntegerField(blank=True, null=True)
    synsuite_code = models.IntegerField(blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code_a = models.CharField(max_length=64, blank=True, null=True)
    erp_code_o = models.CharField(max_length=64, blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_type = models.IntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    upload_image_from_gallery = models.IntegerField()
    is_required_send_image = models.IntegerField()
    v_tasks_update_mac_onu = models.IntegerField()
    v_tasks_update_connection = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'incident_types'



class Patrimonies(models.Model):
    code = models.CharField(max_length=255)
    use_type = models.IntegerField()
    
    
    
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    serial_number = models.CharField(max_length=255, blank=True, null=True)
    tag_number = models.CharField(max_length=255, blank=True, null=True)
    
    
    sector_id = models.IntegerField(blank=True, null=True)
    
    active = models.IntegerField()
    last_preventive_date = models.DateField(blank=True, null=True)
    periodicity_preventive = models.IntegerField(blank=True, null=True)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    contract = models.ForeignKey(Contracts, models.DO_NOTHING, blank=True, null=True)
    client = models.ForeignKey('People', models.DO_NOTHING, blank=True, null=True)
    
    client_sector = models.CharField(max_length=255, blank=True, null=True)
    person_id = models.PositiveIntegerField(blank=True, null=True)
    return_pending = models.IntegerField()
    cost_center = models.CharField(max_length=255, blank=True, null=True)
    supplier_id = models.PositiveIntegerField(blank=True, null=True)
    invoice_number = models.CharField(max_length=255, blank=True, null=True)
    invoice_serial = models.CharField(max_length=255, blank=True, null=True)
    
    service_product = models.ForeignKey('ServiceProducts', models.DO_NOTHING, blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    purchase_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    warranty_time = models.CharField(max_length=255, blank=True, null=True)
    warranty_expires = models.DateField(blank=True, null=True)
    last_accurrence_type = models.IntegerField(blank=True, null=True)
    
    
    observation = models.TextField(blank=True, null=True)
    
    
    last_occurrence_description = models.TextField(blank=True, null=True)
    mac = models.CharField(max_length=255, blank=True, null=True)
    chassi = models.CharField(max_length=255, blank=True, null=True)
    board = models.CharField(max_length=255, blank=True, null=True)
    year_manufacture = models.IntegerField(blank=True, null=True)
    renavam = models.CharField(max_length=255, blank=True, null=True)
    type_fuel = models.CharField(max_length=255, blank=True, null=True)
    displacement = models.CharField(max_length=255, blank=True, null=True)
    current_mileage = models.IntegerField(blank=True, null=True)
    integration_code = models.CharField(max_length=255, blank=True, null=True)
    
    situation = models.IntegerField()
    situation_text = models.CharField(max_length=255, blank=True, null=True)
    integration_maxi_tv_hardware_id = models.CharField(max_length=100, blank=True, null=True)
    situation_date = models.DateTimeField(blank=True, null=True)
    location_validity = models.DateField(blank=True, null=True)
    
    last_known_geoposition_latitude = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_longitude = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_velocity = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_timestamp = models.DateTimeField(blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    p_is_disponible = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'patrimonies'


class People(models.Model):
    situation = models.IntegerField()
    type_tx = models.ForeignKey('TxTypes', models.DO_NOTHING)
    tx_id = models.CharField(max_length=255, blank=True, null=True)
    name = models.CharField(max_length=255)
    name_2 = models.CharField(max_length=255, blank=True, null=True)
    postal_code = models.CharField(max_length=255, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)
    street_type = models.CharField(max_length=255, blank=True, null=True)
    number = models.CharField(max_length=255, blank=True, null=True)
    address_complement = models.CharField(max_length=255, blank=True, null=True)
    neighborhood = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=255, blank=True, null=True)
    country = models.CharField(max_length=255, blank=True, null=True)
    code_country = models.CharField(max_length=255, blank=True, null=True)
    address_reference = models.CharField(max_length=255, blank=True, null=True)
    status = models.IntegerField()
    client = models.IntegerField()
    supplier = models.IntegerField()
    vendor = models.IntegerField()
    collaborator = models.IntegerField()
    technical = models.IntegerField()
    supervisor = models.IntegerField()
    service_provider_autonomo = models.IntegerField()
    competitor = models.IntegerField()
    candidate = models.IntegerField()
    resale = models.IntegerField()
    franchisee = models.IntegerField()
    authorized = models.IntegerField()
    franchisor = models.IntegerField()
    resource = models.IntegerField(blank=True, null=True)
    carrier = models.IntegerField()
    outsourced = models.IntegerField()
    commercial_agent = models.IntegerField()
    accountant = models.IntegerField()
    gender = models.IntegerField(blank=True, null=True)
    civil_status = models.IntegerField(blank=True, null=True)
    financier_postal_code = models.CharField(max_length=255, blank=True, null=True)
    financier_street = models.CharField(max_length=255, blank=True, null=True)
    financier_number = models.CharField(max_length=255, blank=True, null=True)
    financier_address_complement = models.CharField(max_length=255, blank=True, null=True)
    financier_neighborhood = models.CharField(max_length=255, blank=True, null=True)
    financier_city = models.CharField(max_length=255, blank=True, null=True)
    financier_state = models.CharField(max_length=255, blank=True, null=True)
    financier_country = models.CharField(max_length=255, blank=True, null=True)
    financier_address_reference = models.CharField(max_length=255, blank=True, null=True)
    email = models.CharField(max_length=255, blank=True, null=True)
    email_nfe = models.CharField(db_column='email_NFE', max_length=255, blank=True, null=True)  
    register_credit_client_status = models.IntegerField(blank=True, null=True)
    agency = models.CharField(max_length=255, blank=True, null=True)
    agency_check_digit = models.CharField(max_length=255, blank=True, null=True)
    account_check_digit = models.CharField(max_length=255, blank=True, null=True)
    current_account = models.CharField(max_length=255, blank=True, null=True)
    tax_value = models.IntegerField(blank=True, null=True)
    tax_percentage = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    taxes_issqn = models.IntegerField(blank=True, null=True)
    federal_organ = models.IntegerField()
    public_entity = models.IntegerField()
    rural_producer = models.IntegerField()
    aliquot_irr = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    retains_inss = models.IntegerField()
    taxes_municipality = models.IntegerField()
    financier_nature_id = models.PositiveIntegerField(blank=True, null=True)
    date_limit_cred = models.CharField(max_length=255, blank=True, null=True)
    value_limit_cred = models.CharField(max_length=255, blank=True, null=True)
    frequency_visits = models.CharField(max_length=255, blank=True, null=True)
    visit_time = models.CharField(max_length=255, blank=True, null=True)
    mother_company = models.CharField(max_length=255, blank=True, null=True)
    identity = models.CharField(max_length=255, blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    parents_name = models.CharField(max_length=255, blank=True, null=True)
    house_lawyer = models.IntegerField()
    unlike_lawyer = models.IntegerField()
    deceased = models.IntegerField()
    rapporteur = models.IntegerField()
    court_judge = models.IntegerField()
    syndicate = models.IntegerField()
    expert = models.IntegerField()
    simple_opting = models.IntegerField()
    account_accounting_client = models.CharField(max_length=255, blank=True, null=True)
    account_accounting_supplier = models.CharField(max_length=255, blank=True, null=True)
    financial_account_accountant_file_id = models.IntegerField(blank=True, null=True)
    supplier_financial_account_accountant_file_id = models.IntegerField(blank=True, null=True)
    administrative_observation = models.TextField(blank=True, null=True)
    lat = models.CharField(max_length=255, blank=True, null=True)
    lng = models.CharField(max_length=255, blank=True, null=True)
    taxation_regime_type = models.IntegerField()
    debit_account_code = models.CharField(max_length=255, blank=True, null=True)
    debit_account_operation = models.CharField(max_length=255, blank=True, null=True)
    crc = models.CharField(max_length=255, blank=True, null=True)
    retains_income_tax = models.IntegerField()
    retains_social_contribution = models.IntegerField()
    csll_deducted = models.IntegerField()
    pis_aliquot = models.DecimalField(max_digits=10, decimal_places=2)
    cofins_aliquot = models.DecimalField(max_digits=10, decimal_places=2)
    photo_base64 = models.TextField(blank=True, null=True)
    check_tx_id_data = models.TextField(blank=True, null=True)
    check_tx_id_data_complete = models.TextField(blank=True, null=True)
    check_tx_id_data_serasa = models.TextField(blank=True, null=True)
    prosoft_exported = models.DateTimeField(blank=True, null=True)
    sms_enabled = models.IntegerField()
    website = models.CharField(max_length=255, blank=True, null=True)
    iss_responsible = models.IntegerField()
    icms_discount = models.IntegerField()
    last_known_geoposition_latitude = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_longitude = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_precision = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_velocity = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    last_known_geoposition_timestamp = models.DateTimeField(blank=True, null=True)
    last_known_geoposition_battery = models.IntegerField(blank=True, null=True)
    last_known_geoposition_errors = models.CharField(max_length=255, blank=True, null=True)
    last_known_geoposition_mocked = models.IntegerField(blank=True, null=True)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    deleted = models.IntegerField()
    client_group_id = models.IntegerField(blank=True, null=True)
    phone = models.CharField(max_length=255, blank=True, null=True)
    commercial_phone = models.CharField(max_length=255, blank=True, null=True)
    fax_phone = models.CharField(max_length=255, blank=True, null=True)
    cell_phone_1 = models.CharField(max_length=255, blank=True, null=True)
    cell_phone_2 = models.CharField(max_length=255, blank=True, null=True)
    observ = models.TextField(blank=True, null=True)
    observ2 = models.TextField(blank=True, null=True)
    technical_documentation = models.TextField(blank=True, null=True)
    id_provisorio = models.CharField(max_length=255, blank=True, null=True)
    grupo = models.CharField(max_length=255, blank=True, null=True)
    state_registration_type = models.IntegerField(blank=True, null=True)
    state_registration = models.CharField(max_length=255, blank=True, null=True)
    municipal_registration = models.CharField(max_length=255, blank=True, null=True)
    regional_council_registration = models.CharField(max_length=255, blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_type = models.IntegerField(blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    driver_integration_code = models.CharField(max_length=255, blank=True, null=True)
    sync_id = models.CharField(max_length=255, blank=True, null=True)
    erp_code_tecnico = models.CharField(max_length=64, blank=True, null=True)
    erp_code_tecnico_os = models.CharField(max_length=64, blank=True, null=True)
    debit_register_file_remittance_id = models.PositiveIntegerField(blank=True, null=True)
    debit_register_file_return_id = models.PositiveIntegerField(blank=True, null=True)
    service_provider = models.IntegerField()
    service_provider_cprb_opting = models.IntegerField()
    telegram_phone = models.CharField(max_length=255, blank=True, null=True)
    whatsapp_phone = models.CharField(max_length=255, blank=True, null=True)
    not_comunicate_me = models.IntegerField(blank=True, null=True)
    comunicate_through_email = models.IntegerField(blank=True, null=True)
    comunicate_through_sms = models.IntegerField(blank=True, null=True)
    comunicate_through_whatsapp = models.IntegerField(blank=True, null=True)
    comunicate_through_telegram = models.IntegerField(blank=True, null=True)
    social_network_facebook = models.IntegerField(blank=True, null=True)
    social_network_instagram = models.IntegerField(blank=True, null=True)
    social_network_linkedin = models.IntegerField(blank=True, null=True)
    social_network_twitter = models.IntegerField(blank=True, null=True)
    updated_profile = models.IntegerField(blank=True, null=True)
    v_name = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'people'

    def __str__(self):
        return self.name.title()


class PeopleAddresses(models.Model):
    person = models.ForeignKey(People, models.DO_NOTHING)
    type = models.IntegerField()
    street_type = models.CharField(max_length=255, blank=True, null=True)
    postal_code = models.CharField(max_length=10, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)
    number = models.CharField(max_length=45, blank=True, null=True)
    address_complement = models.CharField(max_length=255, blank=True, null=True)
    neighborhood = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    code_city_id = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=2, blank=True, null=True)
    country = models.CharField(max_length=255, blank=True, null=True)
    code_country = models.CharField(max_length=255, blank=True, null=True)
    address_reference = models.CharField(max_length=255, blank=True, null=True)
    latitude = models.CharField(max_length=255, blank=True, null=True)
    longitude = models.CharField(max_length=255, blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField(blank=True, null=True)
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'people_addresses'


class PaymentConditions(models.Model):
    code = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    active = models.IntegerField()
    payment_type = models.IntegerField()
    forward_times = models.IntegerField(blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'payment_conditions'



class SaleRequestItems(models.Model):
    sale_request = models.ForeignKey('SaleRequests', models.DO_NOTHING)
    signal = models.IntegerField()
    type = models.IntegerField()
    description = models.TextField(blank=True, null=True)
    # service_product = models.ForeignKey('ServiceProducts', models.DO_NOTHING)
    # unit_measure = models.ForeignKey('UnitsMeasures', models.DO_NOTHING, blank=True, null=True)
    number = models.IntegerField()
    unit_amount = models.DecimalField(max_digits=10, decimal_places=4, blank=True, null=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    observation = models.TextField(blank=True, null=True)
    file_path = models.CharField(max_length=255, blank=True, null=True)
    # sale_point_transaction = models.ForeignKey(SalePointTransactions, models.DO_NOTHING, blank=True, null=True)
    # patrimony = models.ForeignKey(Patrimonies, models.DO_NOTHING, blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    temp_unit_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    temp_total_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    date_execution = models.DateField(blank=True, null=True)
    needs_approval_discount = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_request_items'



class SaleRequests(models.Model):
    # company_place = models.ForeignKey(CompaniesPlaces, models.DO_NOTHING)
    beginning_date = models.DateField()
    final_date = models.DateField(blank=True, null=True)
    # vendor = models.ForeignKey(People, models.DO_NOTHING, blank=True, null=True)
    client = models.ForeignKey(People, models.DO_NOTHING)
    # carrier = models.ForeignKey(People, models.DO_NOTHING, blank=True, null=True)
    origin = models.IntegerField()
    services_number = models.IntegerField()
    products_number = models.IntegerField()
    service_total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    product_total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    liquid_amount = models.DecimalField(max_digits=10, decimal_places=2)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    balance = models.DecimalField(max_digits=12, decimal_places=2)
    discount = models.DecimalField(max_digits=12, decimal_places=2)
    discount_type = models.IntegerField()
    situation = models.IntegerField()
    observation = models.TextField(blank=True, null=True)
    motive = models.TextField(blank=True, null=True)
    # payment_condition = models.ForeignKey(PaymentConditions, models.DO_NOTHING, blank=True, null=True)
    # financer_nature = models.ForeignKey(FinancersNatures, models.DO_NOTHING, blank=True, null=True)
    # payment_form = models.ForeignKey(PaymentForms, models.DO_NOTHING, blank=True, null=True)
    # sale_point = models.ForeignKey(SalePoints, models.DO_NOTHING, blank=True, null=True)
    # event = models.ForeignKey(Events, models.DO_NOTHING, blank=True, null=True)
    contract = models.ForeignKey(Contracts, models.DO_NOTHING, blank=True, null=True)
    # financial_operation = models.ForeignKey(FinancialOperations, models.DO_NOTHING, blank=True, null=True)
    # second_financial_operation = models.ForeignKey(FinancialOperations, models.DO_NOTHING, blank=True, null=True)
    # invoice_serie = models.ForeignKey(InvoiceSeries, models.DO_NOTHING, blank=True, null=True)
    # service_price_list = models.ForeignKey('ServicePriceLists', models.DO_NOTHING, blank=True, null=True)
    # financial_collection_type = models.ForeignKey(FinancialCollectionTypes, models.DO_NOTHING, blank=True, null=True)
    # route = models.ForeignKey(Routes, models.DO_NOTHING, blank=True, null=True)
    freight_type = models.IntegerField()
    incidental_expenses = models.DecimalField(max_digits=12, decimal_places=2)
    delivery_address = models.IntegerField()
    # people_address = models.ForeignKey(PeopleAddresses, models.DO_NOTHING, blank=True, null=True)
    # people_address_collection = models.ForeignKey(PeopleAddresses, models.DO_NOTHING, blank=True, null=True)
    remade_id = models.IntegerField(blank=True, null=True)
    request_printed = models.IntegerField()
    address_type = models.IntegerField()
    credit_limit_problem = models.IntegerField()
    # client_advanced_posting = models.ForeignKey(FinancialAdvancePostings, models.DO_NOTHING, blank=True, null=True)
    # client_payable_title = models.ForeignKey(FinancialPayableTitles, models.DO_NOTHING, blank=True, null=True)
    presence_type = models.IntegerField(blank=True, null=True)
    final_consumer = models.IntegerField(blank=True, null=True)
    issuer_state = models.CharField(max_length=255, blank=True, null=True)
    export_local = models.CharField(max_length=255, blank=True, null=True)
    included_billing = models.DateTimeField(blank=True, null=True)
    volume_quantity = models.IntegerField()
    weight_net = models.DecimalField(max_digits=10, decimal_places=2)
    weight_gross = models.DecimalField(max_digits=10, decimal_places=2)
    custom_data = models.TextField(blank=True, null=True)
    # crm_direct_selling_process = models.ForeignKey(CrmDirectSellingProcesses, models.DO_NOTHING, blank=True, null=True)
    payment_card_success = models.IntegerField()
    payment_card_collection_type = models.ForeignKey(FinancialCollectionTypes, models.DO_NOTHING, blank=True, null=True)
    payment_card_nsu = models.CharField(max_length=255, blank=True, null=True)
    payment_card_parcels = models.IntegerField(blank=True, null=True)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    temp_service_total_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    temp_product_total_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    temp_liquid_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    temp_total_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    needs_approval_discount = models.IntegerField(blank=True, null=True)
    generate_only_title = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sale_requests'



class ServiceProductGroups(models.Model):
    code = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    type = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    dominio_code = models.IntegerField(blank=True, null=True)
    active = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    hash = models.CharField(max_length=36)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_type = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_product_groups'


class ServiceProducts(models.Model):
    code = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    type = models.IntegerField()
    vendible = models.IntegerField()
    service_type = models.IntegerField(blank=True, null=True)
    virtual = models.IntegerField()
    service_product_origin = models.IntegerField(blank=True, null=True)
    service_product_group = models.ForeignKey(ServiceProductGroups, models.DO_NOTHING, blank=True, null=True)
    
    fiscal_classification_code = models.CharField(max_length=4, blank=True, null=True)
    minimum_inventory = models.IntegerField()
    maximum_inventory = models.IntegerField()
    alert_inventory = models.IntegerField()
    
    
    second_unit_discount = models.DecimalField(max_digits=12, decimal_places=2)
    conversion_factor = models.IntegerField(blank=True, null=True)
    number = models.IntegerField(blank=True, null=True)
    selling_price = models.DecimalField(max_digits=12, decimal_places=2)
    minimun_selling_price = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    cost_last_purchase = models.DecimalField(max_digits=12, decimal_places=2)
    amount_last_purchase = models.DecimalField(max_digits=12, decimal_places=2)
    mean_cost = models.DecimalField(max_digits=12, decimal_places=2)
    replacement_cost = models.DecimalField(max_digits=12, decimal_places=2)
    margin_selling_price = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    change_selling_price = models.IntegerField()
    mva = models.DecimalField(max_digits=14, decimal_places=4)
    index = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    active = models.IntegerField()
    internal_control = models.IntegerField()
    internal_movimentation = models.IntegerField()
    serial_control = models.IntegerField()
    batch_control = models.IntegerField()
    position = models.IntegerField(blank=True, null=True)
    bar_code = models.CharField(max_length=255, blank=True, null=True)
    stock_location = models.CharField(max_length=255, blank=True, null=True)
    
    
    
    pis = models.CharField(max_length=255, blank=True, null=True)
    pis_aliquot = models.DecimalField(max_digits=14, decimal_places=4)
    pis_base = models.DecimalField(max_digits=10, decimal_places=2)
    cofins = models.CharField(max_length=255, blank=True, null=True)
    cofins_aliquot = models.DecimalField(max_digits=14, decimal_places=4)
    cofins_base = models.DecimalField(max_digits=10, decimal_places=2)
    ncm = models.CharField(max_length=255, blank=True, null=True)
    exception = models.IntegerField()
    cst = models.CharField(max_length=255, blank=True, null=True)
    description_1 = models.TextField(blank=True, null=True)
    print_template_id = models.PositiveIntegerField(blank=True, null=True)
    description_2 = models.TextField(blank=True, null=True)
    inventory_update = models.IntegerField()
    generate_patrimony = models.IntegerField()
    retain_tax_irrf = models.IntegerField()
    taxes_issqn = models.IntegerField()
    issqn = models.DecimalField(max_digits=5, decimal_places=2)
    retain_tax_inss = models.IntegerField()
    inss_aliquot = models.DecimalField(max_digits=14, decimal_places=4)
    inss_basis = models.DecimalField(max_digits=12, decimal_places=2)
    
    code_activity_type = models.IntegerField()
    dir = models.CharField(max_length=255, blank=True, null=True)
    service_product_image = models.CharField(max_length=255, blank=True, null=True)
    net_weight = models.DecimalField(max_digits=12, decimal_places=2)
    gross_weight = models.DecimalField(max_digits=12, decimal_places=2)
    target_upload = models.IntegerField()
    target_download = models.IntegerField()
    validate_data_packet = models.IntegerField()
    upload_max_limit = models.IntegerField(blank=True, null=True)
    download_max_limit = models.IntegerField(blank=True, null=True)
    use_burst = models.IntegerField()
    burst_limit_upload = models.IntegerField(blank=True, null=True)
    burst_limit_download = models.IntegerField(blank=True, null=True)
    burst_threshold_upload = models.IntegerField(blank=True, null=True)
    burst_threshold_download = models.IntegerField(blank=True, null=True)
    burst_time_upload = models.IntegerField(blank=True, null=True)
    burst_time_download = models.IntegerField(blank=True, null=True)
    use_bandwidth_warranty = models.IntegerField()
    bandwidth_warranty_upload = models.IntegerField(blank=True, null=True)
    bandwidth_warranty_download = models.IntegerField(blank=True, null=True)
    dedicated = models.IntegerField()
    service_code_provided = models.IntegerField(blank=True, null=True)
    sva = models.DecimalField(max_digits=12, decimal_places=2)
    scm = models.DecimalField(max_digits=12, decimal_places=2)
    cest = models.CharField(max_length=255, blank=True, null=True)
    csll_deducted = models.IntegerField()
    franchise_control_day = models.IntegerField(blank=True, null=True)
    out_franchise_download = models.IntegerField(blank=True, null=True)
    out_franchise_upload = models.IntegerField(blank=True, null=True)
    franchise_limit = models.IntegerField(blank=True, null=True)
    integrator_type = models.IntegerField(blank=True, null=True)
    
    
    phone_profile = models.CharField(max_length=255, blank=True, null=True)
    accounting_code = models.CharField(max_length=255, blank=True, null=True)
    febraban_category_code = models.IntegerField(blank=True, null=True)
    integration_code = models.CharField(max_length=255, blank=True, null=True)
    integration_service_type = models.IntegerField(blank=True, null=True)
    credit_limit = models.DecimalField(max_digits=10, decimal_places=2)
    tip_payment = models.IntegerField()
    technical_settings = models.IntegerField()
    number_ge_ports = models.IntegerField(blank=True, null=True)
    number_fe_ports = models.IntegerField(blank=True, null=True)
    has_fxs = models.IntegerField()
    number_fxs_ports = models.IntegerField(blank=True, null=True)
    conector_type = models.IntegerField()
    has_wifi = models.IntegerField()
    wifi_type = models.IntegerField(blank=True, null=True)
    ingress_police_name = models.CharField(max_length=255, blank=True, null=True)
    egress_police_name = models.CharField(max_length=255, blank=True, null=True)
    ipv6_ingress_police_name = models.CharField(max_length=255, blank=True, null=True)
    ipv6_egress_police_name = models.CharField(max_length=255, blank=True, null=True)
    trafic_table_outbound = models.CharField(max_length=255, blank=True, null=True)
    trafic_table_inbound = models.CharField(max_length=255, blank=True, null=True)
    acquisition_request_enabled = models.IntegerField()
    synsuite_code = models.IntegerField(blank=True, null=True)
    use_composition = models.IntegerField()
    composition_method_calc = models.IntegerField()
    percentage_selling_price = models.DecimalField(max_digits=10, decimal_places=2)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_type = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)
    
    service_using_type = models.IntegerField()
    
    generate_service_tag = models.IntegerField(blank=True, null=True)
    sped_pis_aliquot = models.DecimalField(max_digits=10, decimal_places=2)
    sped_pis_aliquot_use = models.IntegerField()
    sped_cofins_aliquot = models.DecimalField(max_digits=10, decimal_places=2)
    sped_cofins_aliquot_use = models.IntegerField()
    sped_register_in_block_h = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    erp_code_prd = models.CharField(max_length=64, blank=True, null=True)
    use_lte = models.IntegerField(blank=True, null=True)
    lte_use_replication = models.IntegerField(blank=True, null=True)
    lte_quantity_simcards = models.IntegerField(blank=True, null=True)
    lte_franchise = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    lte_integrator_type = models.IntegerField(blank=True, null=True)
    lte_integration_code = models.CharField(max_length=100, blank=True, null=True)
    use_streaming = models.IntegerField(blank=True, null=True)
    streaming_integrator_type = models.IntegerField(blank=True, null=True)
    streaming_integration_code = models.CharField(max_length=100, blank=True, null=True)
    generate_serial = models.IntegerField(blank=True, null=True)
    homologation_control = models.IntegerField()
    homologation_situation = models.IntegerField()
    homologation_expiration = models.DateField(blank=True, null=True)
    homologation_description = models.TextField(blank=True, null=True)
    homologation_certificate = models.CharField(max_length=255, blank=True, null=True)
    huawei_profile_name = models.CharField(max_length=255, blank=True, null=True)
    is_decoder = models.IntegerField(blank=True, null=True)
    has_convenia_integration = models.IntegerField()
    additional_attributes = models.CharField(max_length=255, blank=True, null=True)
    motv_has_integration = models.IntegerField()
    motv_code_integration = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service_products'

    def __str__(self):
        return "{}".format(self.title)
    
    def get_in_stock(self):
        
        cursor = connections['erp'].cursor()

        query = "SELECT SUM(`v_products_analysis_balances`.`in_stock`) AS in_stock FROM `dbemp00359`.`v_products_analysis_balances` WHERE `v_products_analysis_balances`.`service_product_id` = {}".format(self.id)

        cursor.execute(query)

        rows = cursor.fetchall()
        data = []
        data = [row[0] for row in rows]

        in_stock = int(data[0])

        return in_stock




class SolicitationClassifications(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    incident_type = models.ForeignKey(IncidentTypes, models.DO_NOTHING, blank=True, null=True)
    context_type = models.IntegerField(blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField()
    weight = models.IntegerField()
    checklist = models.TextField(blank=True, null=True)
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField(blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'solicitation_classifications'


class SolicitationClassificationsSolicitationProblems(models.Model):
    solicitation_classification = models.ForeignKey(SolicitationClassifications, models.DO_NOTHING)
    solicitation_problem = models.ForeignKey('SolicitationProblems', models.DO_NOTHING)
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'solicitation_classifications_solicitation_problems'


class SolicitationProblems(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    provisory_solution = models.TextField(blank=True, null=True)
    definitive_solution = models.TextField(blank=True, null=True)
    has_solution = models.IntegerField()
    weight = models.IntegerField()
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    modified_by = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField(blank=True, null=True)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'solicitation_problems'


class Teams(models.Model):
    code = models.CharField(max_length=255, blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    person = models.ForeignKey(People, models.DO_NOTHING)
    
    sector_id = models.IntegerField(blank=True, null=True)
    
    close_incident = models.IntegerField()
    default_private_report = models.IntegerField()
    activation_team = models.IntegerField()
    team_config = models.TextField(blank=True, null=True)
    active = models.IntegerField()
    time_control = models.IntegerField()
    time_control_json = models.TextField(blank=True, null=True)
    time_control_html = models.TextField(blank=True, null=True)
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    synsuite_code = models.IntegerField(blank=True, null=True)
    deleted = models.IntegerField()
    hash = models.CharField(max_length=36)
    erp_code = models.CharField(max_length=64, blank=True, null=True)
    erp_code_origin = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'teams'


class TxTypes(models.Model):
    id = models.PositiveIntegerField(primary_key=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    type = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.PositiveIntegerField(blank=True, null=True)
    created_by = models.PositiveIntegerField()
    place_id = models.PositiveIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tx_types'

    def get_type_name(self):
        if self.type == 1:
            return 'pessoa física'
        elif self.type == 2:
            return 'pessoa jurídica'
        elif self.type == 3:
            return 'pessoa estrangueira'
        else:
            return 'pessoa física ou jurídica'


# VIEW

class ProductsAnalysisBalances(models.Model):
    company_place_id = models.IntegerField()
    service_product_id = models.IntegerField()
    in_stock = models.DecimalField(max_digits=12, decimal_places=2)
    disponible = models.DecimalField(max_digits=12, decimal_places=2)
    reserveded = models.DecimalField(max_digits=12, decimal_places=2)
    reserveded_sale_request = models.DecimalField(max_digits=12, decimal_places=2)
    reserveded_products_in_solicitations = models.DecimalField(max_digits=12, decimal_places=2)
    internal_use = models.DecimalField(max_digits=12, decimal_places=2)
    pending_products = models.DecimalField(max_digits=12, decimal_places=2)
    total = models.DecimalField(max_digits=12, decimal_places=2)

    class Meta:
        managed = False
        db_table = 'v_products_analysis_balances'

